name: Build and Publish Docker Images

on:
  push:
    branches:
      - main
  release:
    types: [published]
  workflow_dispatch:
    inputs:
      tag:
        description: 'Docker image tag'
        required: false
        default: 'dev'
      push:
        description: 'Push to registry'
        type: boolean
        required: false
        default: true

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  build-and-push:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}
            type=raw,value=latest,enable={{is_default_branch}}
            type=sha,prefix={{branch}}-

      - name: Determine version
        id: version
        run: |
          if [[ "${{ github.event_name }}" == "release" ]]; then
            VERSION="${{ github.event.release.tag_name }}"
            VERSION="${VERSION#v}"  # Remove 'v' prefix if present
          else
            VERSION=$(grep '^version = ' Cargo.toml | sed 's/version = "\(.*\)"/\1/')
          fi
          echo "VERSION=${VERSION}" >> $GITHUB_OUTPUT
          echo "Building version: ${VERSION}"

      - name: Determine Docker tag
        id: docker_tag
        run: |
          if [[ "${{ github.event_name }}" == "workflow_dispatch" && -n "${{ github.event.inputs.tag }}" ]]; then
            DOCKER_TAG="${{ github.event.inputs.tag }}"
          elif [[ "${{ github.event_name }}" == "release" ]]; then
            DOCKER_TAG="release"
          else
            DOCKER_TAG="dev"
          fi
          echo "DOCKER_TAG=${DOCKER_TAG}" >> $GITHUB_OUTPUT
          echo "Using Docker tag: ${DOCKER_TAG}"

      - name: Determine GitHub organization (lowercase)
        id: github_org
        run: |
          # Convert organization name to lowercase for Docker registry compliance
          GITHUB_ORG=$(echo "${{ github.repository_owner }}" | tr '[:upper:]' '[:lower:]')
          echo "GITHUB_ORG=${GITHUB_ORG}" >> $GITHUB_OUTPUT
          echo "Using GitHub org: ${GITHUB_ORG}"

      - name: Build Docker image
        if: github.event_name == 'pull_request'
        run: |
          VERSION=${{ steps.version.outputs.VERSION }} \
          DOCKER_TAG=${{ steps.docker_tag.outputs.DOCKER_TAG }} \
          GITHUB_ORG=${{ steps.github_org.outputs.GITHUB_ORG }} \
          docker buildx bake -f docker/docker-bake.hcl claude-task-linux

      - name: Build and push Docker image
        if: github.event_name != 'pull_request' && (github.event_name != 'workflow_dispatch' || github.event.inputs.push == 'true')
        run: |
          VERSION=${{ steps.version.outputs.VERSION }} \
          DOCKER_TAG=${{ steps.docker_tag.outputs.DOCKER_TAG }} \
          GITHUB_ORG=${{ steps.github_org.outputs.GITHUB_ORG }} \
          docker buildx bake -f docker/docker-bake.hcl claude-task-ghcr --push


      - name: Generate image summary
        if: github.event_name != 'pull_request'
        run: |
          echo "## Docker Images Published 🐳" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### Images" >> $GITHUB_STEP_SUMMARY
          echo "- \`${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest\`" >> $GITHUB_STEP_SUMMARY
          echo "- \`${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:v${{ steps.version.outputs.VERSION }}\`" >> $GITHUB_STEP_SUMMARY
          echo "- \`${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ steps.docker_tag.outputs.DOCKER_TAG }}\`" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### Pull Command" >> $GITHUB_STEP_SUMMARY
          echo "\`\`\`bash" >> $GITHUB_STEP_SUMMARY
          echo "docker pull ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest" >> $GITHUB_STEP_SUMMARY
          echo "\`\`\`" >> $GITHUB_STEP_SUMMARY